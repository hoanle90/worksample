{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///Users/heu/Desktop/worksample/frontend/src/store/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport type { Product, CartItem, CartState } from \"../types\";\n\n\nconst initialState: CartState = {};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action: PayloadAction<Product>) => {\n      const product = action.payload;\n      if (state[product.id]) {\n        state[product.id].quantity += 1;\n      } else {\n        state[product.id] = {\n          product,\n          quantity: 1,\n        };\n      }\n    },\n    updateQuantity: (\n      state,\n      action: PayloadAction<{ id: number; quantity: number }>\n    ) => {\n      const { id, quantity } = action.payload;\n      if (state[id]) {\n        state[id].quantity = quantity;\n        if (quantity <= 0) {\n          delete state[id];\n        }\n      }\n    },\n    removeFromCart: (state, action: PayloadAction<number>) => {\n      delete state[action.payload];\n    },\n    clearCart: () => {\n      return {};\n    },\n    setCart: (state, action: PayloadAction<CartState>) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const {\n  addToCart,\n  updateQuantity,\n  removeFromCart,\n  clearCart,\n  setCart,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;AAIA,MAAM,eAA0B,CAAC;AAEjC,MAAM,YAAY,CAAA,GAAA,wIAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN;IACA,UAAU;QACR,WAAW,CAAC,OAAO;YACjB,MAAM,UAAU,OAAO,OAAO;YAC9B,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;gBACrB,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,IAAI;YAChC,OAAO;gBACL,KAAK,CAAC,QAAQ,EAAE,CAAC,GAAG;oBAClB;oBACA,UAAU;gBACZ;YACF;QACF;QACA,gBAAgB,CACd,OACA;YAEA,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,OAAO,OAAO;YACvC,IAAI,KAAK,CAAC,GAAG,EAAE;gBACb,KAAK,CAAC,GAAG,CAAC,QAAQ,GAAG;gBACrB,IAAI,YAAY,GAAG;oBACjB,OAAO,KAAK,CAAC,GAAG;gBAClB;YACF;QACF;QACA,gBAAgB,CAAC,OAAO;YACtB,OAAO,KAAK,CAAC,OAAO,OAAO,CAAC;QAC9B;QACA,WAAW;YACT,OAAO,CAAC;QACV;QACA,SAAS,CAAC,OAAO;YACf,OAAO,OAAO,OAAO;QACvB;IACF;AACF;AAEO,MAAM,EACX,SAAS,EACT,cAAc,EACd,cAAc,EACd,SAAS,EACT,OAAO,EACR,GAAG,UAAU,OAAO;uCAEN,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/heu/Desktop/worksample/frontend/src/store/store.ts"],"sourcesContent":["\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport cartReducer from \"./cartSlice\";\nimport { createWrapper } from \"next-redux-wrapper\";\n\n\nconst makeStore = () =>\n  configureStore({\n    reducer: {\n      cart: cartReducer,\n    },\n  });\n\n\nexport const wrapper = createWrapper(makeStore);\n\n\nexport type AppStore = ReturnType<typeof makeStore>;\nexport type AppDispatch = AppStore[\"dispatch\"];\nexport type RootState = ReturnType<AppStore[\"getState\"]>;\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;;;;;;AAGA,MAAM,YAAY,IAChB,CAAA,GAAA,wIAAA,CAAA,iBAAc,AAAD,EAAE;QACb,SAAS;YACP,MAAM,kHAAA,CAAA,UAAW;QACnB;IACF;AAGK,MAAM,UAAU,CAAA,GAAA,yIAAA,CAAA,gBAAa,AAAD,EAAE","debugId":null}}]
}